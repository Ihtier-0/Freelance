/*
Требуется реализовать упрощённую игру в Морской бой.
Игровое поле размером 10 на 10 клеток.
Участвует двое игроков.
В арсенале каждого из них:
4 маленьких кораблика размером в одну клетку,
3 небольших корабля размером в две клетки,
2 средних корабля размером в три клетки
и один большой корабль размером в четыре клетки.
Для простоты, клетки поля пронумерованы по вертикали от 0 до 9,
и по горизонтали также от 0 до 9.
Мы не будем использовать классические наименования клеток,
такие как B4, C6, а просто два индекса.
Вначале игроки по очереди расставляют корабли,
начиная с самых маленьких и заканчивая большими.
Маленькие корабли в одну клетку расставляются с помощью указания лишь одной клетки-точки на поле, к примеру 2,1.
Корабли размерностью от двух клеток и выше, расставляются с помощью координат их начала и конца, к примеру: 0,1 - 0,3.
Корабли могут быть установлены только строго вертикально, или горизонтально.
Установка корабля по диагонали — недопустимо, в случае которого об этом тоже надо сообщить пользователю.
Если корабль не может быть размещён на заданных клетках из-за того, что он столкнётся с другим кораблём (окажется на его клетках)
или выйдет за пределы поля вообще, то игроку должно быть сделано предупреждение,
после которого он должен переставить корабль на новые валидные координаты.
Замечу, в нашем упрощённом варианте игры, мы не будем обсчитывать соприкосновения кораблей друг с другом,
а потому корабли вполне можно будет размещать друг к другу вплотную — борт к борту.
После того как все корабли были расставлены начинается игра.
Игроки по очереди атакуют друг друга, называя координаты выстрела.
После выстрела, в консоль выводится информация о его результате: попал или мимо.
Если выстрел успешен, клетка, на которой был корабль (или его фрагмент) затирается и становится пустой.
Игра заканчивается тогда, когда все корабли одной из сторон будут полностью уничтожены.
Как только это произойдёт в консоль выводится информация с номером игрока, который победил.
*/

#include <iostream>

using namespace std;

const int Size = 10;

// ининциализировать игровое поле пустыми клетками
void initializePlayingField(bool(&playingField)[Size][Size], int size);
// поставить к-местный корабль
bool deliverKDeckShip(bool(&playingField)[Size][Size], int size, int k,
	int x1, int y1,
	int x2, int y2);
// заполнить игровое поле
void fillPlayingField(bool(&playingField)[Size][Size], int size);
// начать игру
void playGame(bool(&playingField1)[Size][Size], bool(&playingField2)[Size][Size], int size);
// пустое ли поле
bool isEmptyPlayingField(bool(&playingField)[Size][Size], int size);
// сделать выстрел
bool fire(bool(&playingField)[Size][Size], int size, int x, int y);

int main()
{
	setlocale(LC_ALL, "Russian");

	bool playingField1[Size][Size], playingField2[Size][Size];
	initializePlayingField(playingField1, Size);
	initializePlayingField(playingField2, Size);

	cout << "Игрок 1:\n";
	fillPlayingField(playingField1, Size);
	cout << "Игрок 2:\n";
	fillPlayingField(playingField2, Size);

	playGame(playingField1, playingField2, Size);

	if (isEmptyPlayingField(playingField1, Size))
	{
		cout << "Выиграл второй игрок!\n";
	}
	else
	{
		cout << "Выиграл первый игрок!\n";
	}

	return 0;
}

void initializePlayingField(bool(&playingField)[Size][Size], int size)
{
	for (int i = 0; i < size; ++i)
	{
		for (int j = 0; j < size; ++j)
		{
			playingField[i][j] = false;
		}
	}
}

bool deliverKDeckShip(bool(&playingField)[Size][Size], int size, int k, int x1, int y1, int x2, int y2)
{
	if (x1 < 0 || y1 < 0 || x2 < 0 || y2 < 0 ||
		x1 >= size || y1 >= size || x2 >= size || y2 >= size)
	{
		return false;
	}
	else
	{
		if (x1 == x2 && abs(y1 - y2) == k - 1)
		{
			int min, max;

			if (y1 > y2)
			{
				min = y2;
				max = y1;
			}
			else
			{
				min = y1;
				max = y2;
			}

			for (int i = min; i <= max; ++i)
			{
				if (playingField[x1][i])
				{
					return false;
				}
				else
				{
					playingField[x1][i] = true;
				}
			}
		}
		else if(y1 == y2 && abs(x1 - x2) == k - 1)
		{
			int min, max;

			if (x1 > x2)
			{
				min = x2;
				max = x1;
			}
			else
			{
				min = x1;
				max = x2;
			}

			for (int i = min; i <= max; ++i)
			{
				if (playingField[i][y1])
				{
					return false;
				}
				else
				{
					playingField[i][y1] = true;
				}
			}
		}
		else
		{
			return false;
		}
	}

	return true;
}

void fillPlayingField(bool(&playingField)[Size][Size], int size)
{
	int x1, y1, x2, y2;

	for (int i = 0; i < 4; ++i)
	{
		cout << "Введите координаты однопалубного корабля\nx: ";
		cin >> x1;
		cout << "y: ";
		cin >> y1;

		if (!deliverKDeckShip(playingField, size, 1, x1, y1, x1, y1))
		{
			cout << "Поставить корабль не удалось! Попробуйте ещё раз!\n";
			--i;
		}
	}

	for (int i = 0; i < 3; ++i)
	{
		cout << "Введите координаты начала двухпалубного корабля\nx: ";
		cin >> x1;
		cout << "y: ";
		cin >> y1;
		cout << "Введите координаты конца двухпалубного корабля\nx: ";
		cin >> x2;
		cout << "y: ";
		cin >> y2;

		if (!deliverKDeckShip(playingField, size, 2, x1, y1, x2, y2))
		{
			cout << "Поставить корабль не удалось! Попробуйте ещё раз!\n";
			--i;
		}
	}

	for (int i = 0; i < 2; ++i)
	{
		cout << "Введите координаты начала трехпалубного корабля\nx: ";
		cin >> x1;
		cout << "y: ";
		cin >> y1;
		cout << "Введите координаты конца трехпалубного корабля\nx: ";
		cin >> x2;
		cout << "y: ";
		cin >> y2;

		if (!deliverKDeckShip(playingField, size, 3, x1, y1, x2, y2))
		{
			cout << "Поставить корабль не удалось! Попробуйте ещё раз!\n";
			--i;
		}
	}

	for (int i = 0; i < 1; ++i)
	{
		cout << "Введите координаты начала четырехпалубного корабля\nx: ";
		cin >> x1;
		cout << "y: ";
		cin >> y1;
		cout << "Введите координаты конца четырехпалубного корабля\nx: ";
		cin >> x2;
		cout << "y: ";
		cin >> y2;

		if (!deliverKDeckShip(playingField, size, 4, x1, y1, x2, y2))
		{
			cout << "Поставить корабль не удалось! Попробуйте ещё раз!\n";
			--i;
		}
	}
}

void playGame(bool(&playingField1)[Size][Size], bool(&playingField2)[Size][Size], int size)
{
	int x, y;

	while (!isEmptyPlayingField(playingField1, size) && !isEmptyPlayingField(playingField2, size))
	{
		do
		{
			cout << "Ход первого игрока\nx: ";
			cin >> x;
			cout << "y: ";
			cin >> y;
		} while (fire(playingField2, size, x, y) && !isEmptyPlayingField(playingField2, size));

		// на случай если первый игрок выиграл, чтобы второй не начинал свой ход
		if (isEmptyPlayingField(playingField2, size))
		{
			return;
		}

		do
		{
			cout << "Ход второго игрока\nx: ";
			cin >> x;
			cout << "y: ";
			cin >> y;
		} while (fire(playingField1, size, x, y) && !isEmptyPlayingField(playingField1, size));
	}
}

bool isEmptyPlayingField(bool(&playingField)[Size][Size], int size)
{
	for (int i = 0; i < size; ++i)
	{
		for (int j = 0; j < size; ++j)
		{
			if (playingField[i][j])
			{
				return false;
			}
		}
	}

	return true;
}

bool fire(bool(&playingField)[Size][Size], int size, int x, int y)
{
	if (x < 0 || y < 0 || x >= size || y >= size || !playingField[x][y])
	{
		cout << "Мимо!\n";
		return false;
	}
	else
	{
		cout << "Попал!\n";
		playingField[x][y] = false;
		return true;
	}
}
